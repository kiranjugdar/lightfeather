import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.core.session.SessionAuthenticationException;
import org.springframework.security.web.authentication.AuthenticationFailureHandler;
import org.springframework.stereotype.Component;
import java.io.IOException;

@Component
public class CustomAuthenticationFailureHandler implements AuthenticationFailureHandler {

    @Override
    public void onAuthenticationFailure(HttpServletRequest request,
                                        HttpServletResponse response,
                                        AuthenticationException exception) throws IOException, ServletException {
        String errorMessage = "Invalid credentials. Please try again.";

        if (exception instanceof SessionAuthenticationException) {
            errorMessage = "Error: Multiple logins detected. Maximum number of sessions reached. " +
                           "Click here to manage or clear sessions: " +
                           "<a href='/sessionmanager.html'>Session Manager</a>";
        }

        // Option 1: Store the custom error message as a session attribute.
        request.getSession().setAttribute("loginError", errorMessage);

        // Option 2: Alternatively, you can pass the message as a query parameter to the login page.
        // String encodedMessage = URLEncoder.encode(errorMessage, StandardCharsets.UTF_8);
        // response.sendRedirect("/login?error=" + encodedMessage);
        
        // Redirect to the login page with the error flag set.
        response.sendRedirect("/login?error");
    }
}

------

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Login</title>
</head>
<body>
    <h1>Login Page</h1>
    <!-- Display error message if exists. Use th:utext to allow HTML rendering -->
    <div th:if="${session.loginError}" th:utext="${session.loginError}"></div>
    <form action="/login" method="post">
        <!-- Your login fields go here -->
        <button type="submit">Login</button>
    </form>
</body>
</html>

-----------

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.annotation.Order;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.core.session.SessionRegistry;
import org.springframework.security.core.session.SessionRegistryImpl;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
public class SecurityConfig {

    @Bean
    public SessionRegistry sessionRegistry() {
        return new SessionRegistryImpl();
    }

    @Bean
    @Order(2)
    public SecurityFilterChain samlSecurityChain(HttpSecurity http, CustomAuthenticationFailureHandler failureHandler) throws Exception {
        http
            .securityMatcher("/**")
            .authorizeHttpRequests(auth -> auth
                .requestMatchers(
                    "/public/**", "/landing", "/proceed", "/actuator/health",
                    "/favicon.ico", "/css/**", "/js/**", "/images/**", "/webjars/**",
                    "/login", "/saml2/**", "/login/saml2/**"
                ).permitAll()
                .anyRequest().authenticated()
            )
            .saml2Login(saml -> saml
                .successHandler(samlSuccessHandler())  // your custom SAML success handler
                .failureHandler(failureHandler)
            )
            .logout(logout -> logout
                .logoutUrl("/logout")
                .logoutSuccessUrl("/login?logout")
                .invalidateHttpSession(true)
                .deleteCookies("JSESSIONID")
            )
            .sessionManagement(session -> session
                .maximumSessions(1)
                .maxSessionsPreventsLogin(true)
                .sessionRegistry(sessionRegistry())
            );

        return http.build();
    }

    // Define your custom SAML success handler as needed.
    @Bean
    public SamlAuthenticationSuccessHandler samlSuccessHandler() {
        return new SamlAuthenticationSuccessHandler();
    }
}
