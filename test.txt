# Complete List of Changes to Fix React Router Issues

## 1. Update `public/index.html`

**Current:**
```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Security Clearance Tracker</title>
    <meta name="description" content="Security Clearance Tracker Application">
</head>
<body>
    <div id="root"></div>
</body>
</html>
```

**Updated:**
```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Security Clearance Tracker</title>
    <meta name="description" content="Security Clearance Tracker Application">
    <base href="/status-tracker/">
</head>
<body>
    <div id="root"></div>
</body>
</html>
```

**Change:** Added `<base href="/status-tracker/">` tag

---

## 2. Update `src/App.tsx`

**Current:**
```typescript
import React, { useEffect } from "react";
import { HeaderBar } from "./components/HeaderBar";
import MyCases from "./components/MyCases";
import CaseDetails from "./components/CaseDetails";
import { Routes, Route, Navigate, useNavigate } from "react-router-dom";
import "./styles/globals.css";

declare let __webpack_public_path__: string;
const BRAND_BLUE = "#267AAD";

const App: React.FC = () => {
  const navigate = useNavigate();
  const handleBack = () => {
    if (window.history.length > 1) navigate(-1);
  };
  useEffect(() => {
    const basePath = __webpack_public_path__;
    console.log("Base path:", basePath);
  }, []);
  
  return (
    <div className="min-h-screen bg-gray-100">
      <HeaderBar />
      <section style={{ background: "#eef2f7" }} className="w-full">
        <div className="max-w-6xl mx-auto px-6 py-6">
          <button onClick={handleBack} className="inline-flex items-center gap-3" aria-label="Go back" style={{ color: BRAND_BLUE, fontWeight: 700, background: "transparent", border: "none", cursor: "pointer", padding: 0 }}>
            <svg xmlns="http://www.w3.org/2000/svg" width="22" height="22" viewBox="0 0 24 24" fill="none" stroke={BRAND_BLUE} strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
              <polyline points="15 18 9 12 15 6" />
            </svg>
            <span style={{ textDecoration: "underline" }}>Back</span>
          </button>
        </div>
      </section>
      <main className="p-6 max-w-6xl mx-auto">
        <Routes>
          <Route path="/" element={<MyCases />} />
          <Route path="case/:caseId" element={<CaseDetails />} />
          <Route path="*" element={<Navigate to="/" replace />} />
        </Routes>
      </main>
    </div>
  );
};

export default App;
```

**Updated:**
```typescript
import React, { useEffect } from "react";
import { HeaderBar } from "./components/HeaderBar";
import MyCases from "./components/MyCases";
import CaseDetails from "./components/CaseDetails";
import { Routes, Route, Navigate, useNavigate, BrowserRouter } from "react-router-dom";
import "./styles/globals.css";

declare let __webpack_public_path__: string;
const BRAND_BLUE = "#267AAD";

// Internal App component without Router
const AppContent: React.FC = () => {
  const navigate = useNavigate();
  
  const handleBack = () => {
    if (window.history.length > 1) navigate(-1);
  };

  useEffect(() => {
    try {
      const basePath = typeof __webpack_public_path__ !== 'undefined' ? __webpack_public_path__ : '/status-tracker/';
      console.log("Base path:", basePath);
      console.log("Current location:", window.location.pathname);
      console.log("Current href:", window.location.href);
    } catch (error) {
      console.error("Error accessing webpack public path:", error);
    }
  }, []);

  return (
    <div className="min-h-screen bg-gray-100">
      <HeaderBar />
      <section style={{ background: "#eef2f7" }} className="w-full">
        <div className="max-w-6xl mx-auto px-6 py-6">
          <button
            onClick={handleBack}
            className="inline-flex items-center gap-3"
            aria-label="Go back"
            style={{
              color: BRAND_BLUE,
              fontWeight: 700,
              background: "transparent",
              border: "none",
              cursor: "pointer",
              padding: 0,
            }}
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="22"
              height="22"
              viewBox="0 0 24 24"
              fill="none"
              stroke={BRAND_BLUE}
              strokeWidth="2"
              strokeLinecap="round"
              strokeLinejoin="round"
            >
              <polyline points="15 18 9 12 15 6" />
            </svg>
            <span style={{ textDecoration: "underline" }}>Back</span>
          </button>
        </div>
      </section>
      <main className="p-6 max-w-6xl mx-auto">
        <Routes>
          <Route path="/" element={<MyCases />} />
          <Route path="/case/:caseId" element={<CaseDetails />} />
          <Route path="*" element={<Navigate to="/" replace />} />
        </Routes>
      </main>
    </div>
  );
};

// Main App component with Router
const App: React.FC = () => {
  // Determine basename based on environment and webpack config
  const getBasename = () => {
    try {
      // Check if we're in production and have a specific base path
      if (process.env.NODE_ENV === 'production') {
        return '/status-tracker';
      }
      
      // For development, also use the same base path for consistency
      return '/status-tracker';
    } catch (error) {
      console.error("Error determining basename:", error);
      return '/status-tracker';
    }
  };

  const basename = getBasename();
  console.log("App basename:", basename);

  return (
    <BrowserRouter basename={basename}>
      <AppContent />
    </BrowserRouter>
  );
};

export default App;
```

**Changes:**
- Added `BrowserRouter` import
- Split component into `AppContent` and `App`
- Added `BrowserRouter` wrapper with `basename="/status-tracker"`
- Enhanced error handling and logging
- Fixed route path: `case/:caseId` → `/case/:caseId`

---

## 3. Update `webpack.config.js`

**Current publicPath:**
```javascript
publicPath: 'auto'
```

**Updated:**
```javascript
const path = require('path');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');
const CopyWebpackPlugin = require('copy-webpack-plugin');
const { ModuleFederationPlugin } = require('webpack').container;

module.exports = (env, argv) => {
  const isProduction = argv.mode === 'production';
  const basePath = '/status-tracker/';

  return {
    entry: './src/index.tsx',
    output: {
      path: path.resolve(__dirname, 'dist'),
      filename: isProduction ? '[name].[contenthash].js' : '[name].js',
      clean: true,
      // Fix: Use explicit publicPath instead of 'auto'
      publicPath: isProduction ? basePath : basePath
    },
    resolve: {
      extensions: ['.tsx', '.ts', '.js', '.jsx'],
      alias: {
        '@': path.resolve(__dirname, 'src'),
      },
    },
    module: {
      rules: [
        {
          test: /\.tsx?$/,
          use: 'ts-loader',
          exclude: /node_modules/,
        },
        {
          test: /\.css$/,
          use: [
            isProduction ? MiniCssExtractPlugin.loader : 'style-loader',
            'css-loader',
            {
              loader: 'postcss-loader',
              options: {
                postcssOptions: {
                  plugins: [require('tailwindcss'), require('autoprefixer')],
                },
              },
            },
          ],
        },
        {
          test: /\.(png|jpe?g|gif|svg)$/i,
          type: 'asset/resource',
        },
      ],
    },
    plugins: [
      new ModuleFederationPlugin({
        name: 'status_tracker_ui',
        filename: 'remoteEntry.js',
        exposes: {
          './App': './src/App.tsx',
        },
        shared: {
          react: { singleton: true, requiredVersion: false, eager: true },
          'react-dom': { singleton: true, requiredVersion: false, eager: true },
          "react-router-dom": { singleton: true, requiredVersion: false, eager: true },
        },
      }),
      new HtmlWebpackPlugin({
        template: './public/index.html',
        title: 'Security Clearance Tracker',
      }),
      new CopyWebpackPlugin({
        patterns: [
          {
            from: 'public',
            to: '.',
            globOptions: {
              ignore: ['**/index.html'],
            },
          },
        ],
      }),
      ...(isProduction
        ? [
            new MiniCssExtractPlugin({
              filename: '[name].[contenthash].css',
            }),
          ]
        : []),
    ],
    devServer: {
      static: {
        directory: path.join(__dirname, 'public'),
      },
      compress: true,
      port: 3000,
      hot: true,
      headers: {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, PATCH, OPTIONS',
        'Access-Control-Allow-Headers':
          'X-Requested-With, content-type, Authorization',
      },
      historyApiFallback: {
        index: basePath,
        disableDotRule: true,
        rewrites: [
          { from: /^\/status-tracker/, to: basePath + 'index.html' },
        ],
      },
    },
  };
};
```

**Changes:**
- Changed `publicPath: 'auto'` → `publicPath: basePath`
- Added `eager: true` to shared dependencies
- Updated `devServer.historyApiFallback` configuration
- Removed conflicting `static.publicPath` and `devMiddleware.publicPath`

---

## 4. Update `nginx.conf`

**Replace entire current config with:**
```nginx
server {
    listen 8080;
    server_name localhost;
    root /usr/share/nginx/html;
    index index.html;

    # Handle legacy /security-tracker/ redirect first
    location /security-tracker {
        return 301 /status-tracker$request_uri;
    }

    # Handle /status-tracker/ and its sub-paths
    location /status-tracker {
        # Try to serve the file directly, then fallback to index.html for SPA routing
        try_files $uri $uri/ /index.html;
    }

    # Root redirect to status-tracker
    location = / {
        return 301 /status-tracker/;
    }

    # Cache static assets
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        # Allow CORS for module federation
        add_header Access-Control-Allow-Origin "*";
    }

    # Special handling for remoteEntry.js (Module Federation)
    location ~* /remoteEntry\.js$ {
        expires off;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Access-Control-Allow-Origin "*";
        add_header Access-Control-Allow-Methods "GET, OPTIONS";
        add_header Access-Control-Allow-Headers "Content-Type";
    }

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' 'unsafe-inline' 'unsafe-eval' data: blob: *;" always;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/xml+rss
        application/json;
}
```

**Changes:**
- Simplified and fixed conflicting location blocks
- Added proper CORS headers for Module Federation
- Added special handling for `remoteEntry.js`
- Relaxed CSP for Module Federation requirements

---

## 5. Update `src/index.tsx` (Create if doesn't exist)

**Create/Update:**
```typescript
import React from 'react';
import { createRoot } from 'react-dom/client';
import App from './App';

// Error boundary for better debugging
class ErrorBoundary extends React.Component<
  { children: React.ReactNode },
  { hasError: boolean; error?: Error }
> {
  constructor(props: { children: React.ReactNode }) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(error: Error) {
    return { hasError: true, error };
  }

  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {
    console.error('Application Error:', error, errorInfo);
    console.error('Current URL:', window.location.href);
    console.error('Current pathname:', window.location.pathname);
  }

  render() {
    if (this.state.hasError) {
      return (
        <div style={{ padding: '20px', fontFamily: 'Arial, sans-serif' }}>
          <h2>Application Error</h2>
          <details>
            <summary>Error Details</summary>
            <p><strong>Error:</strong> {this.state.error?.message}</p>
            <p><strong>Current URL:</strong> {window.location.href}</p>
            <p><strong>Current pathname:</strong> {window.location.pathname}</p>
            <pre style={{ background: '#f5f5f5', padding: '10px', overflow: 'auto' }}>
              {this.state.error?.stack}
            </pre>
          </details>
          <button 
            onClick={() => window.location.reload()} 
            style={{ marginTop: '10px', padding: '5px 10px' }}
          >
            Reload Page
          </button>
        </div>
      );
    }

    return this.props.children;
  }
}

const container = document.getElementById('root');
if (!container) throw new Error('Failed to find the root element');

const root = createRoot(container);

root.render(
  <React.StrictMode>
    <ErrorBoundary>
      <App />
    </ErrorBoundary>
  </React.StrictMode>
);
```

**Changes:**
- Added error boundary for better debugging
- Ensured no double Router wrapping
- Added detailed error logging

---

## 6. Optional: Create Environment Configuration

**Create `src/config/environment.ts`:**
```typescript
export const getBasePath = (): string => {
  // Check if we're in a Module Federation context
  if (typeof window !== 'undefined' && (window as any).__webpack_public_path__) {
    return '/status-tracker/';
  }
  
  // Check environment variables
  if (process.env.REACT_APP_BASE_PATH) {
    return process.env.REACT_APP_BASE_PATH;
  }
  
  // Default based on NODE_ENV
  return process.env.NODE_ENV === 'production' ? '/status-tracker/' : '/status-tracker/';
};

export const config = {
  basePath: getBasePath(),
  apiUrl: process.env.REACT_APP_API_URL || '',
  environment: process.env.NODE_ENV || 'development'
};
```

---

## Implementation Steps

1. **Stop your current application**
2. **Make all the above file changes**
3. **Clear build cache:** `rm -rf node_modules/.cache dist/`
4. **Rebuild:** `npm run build` (or your build command)
5. **Rebuild Docker image** (if using containers)
6. **Deploy to ECS**
7. **Test the application**

## Testing Checklist

After implementation, verify:

- [ ] Application loads at `/status-tracker/`
- [ ] Navigation between routes works
- [ ] Browser back/forward buttons work
- [ ] Module Federation remote loading works
- [ ] No console errors related to routing
- [ ] Direct URL access works (e.g., `/status-tracker/case/123`)

## Expected Console Output

After fixes, you should see:
```
App basename: /status-tracker
Base path: /status-tracker/
Current location: /
Current href: https://yourdomain.com/status-tracker/
```

These changes address the core React Router assertion error and Module Federation path resolution issues you're experiencing.
