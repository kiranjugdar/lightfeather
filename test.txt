package gov.ssa.telephone.taps.services;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.util.ReflectionTestUtils;
import org.springframework.web.client.RestTemplate;

import gov.ssa.telephone.taps.constants.AppDataStatus;
import gov.ssa.telephone.taps.constants.TeleApsConstants;
import gov.ssa.telephone.taps.exceptions.ApplicationException;
import gov.ssa.telephone.taps.model.CommonContent;

@ExtendWith(MockitoExtension.class)
class ClaimStatusServiceTest {

    @Mock
    private RestTemplate commonApsRestTemplate;

    @Mock
    private TeleApsConstants teleApsConstants;

    @InjectMocks
    private ClaimStatusService service;

    @BeforeEach
    void setUp() {
        // Stub out the HTTP method your service uses
        when(teleApsConstants.getCommonApsMethod()).thenReturn("POST");
        // Inject the URL/URI your service calls
        ReflectionTestUtils.setField(
            service,
            "apswsClaimResource",
            "http://dummy-host/v3/claim"
        );
        // In case you wired TeleApsConstants via field injection
        ReflectionTestUtils.setField(
            service,
            "teleApsConstants",
            teleApsConstants
        );
    }

    @Test
    void whenRestTemplateThrows_thenWrapInApplicationException() {
        // arrange
        when(commonApsRestTemplate.exchange(
                anyString(),
                eq(HttpMethod.POST),
                any(HttpEntity.class),
                eq(CommonContent[].class)))
            .thenThrow(new RuntimeException("timeout"));

        // act & assert
        ApplicationException ex = assertThrows(
            ApplicationException.class,
            () -> service.getClaimData("123-45-6789", "REQ-001")
        );

        assertEquals(AppDataStatus.SYSTEM_FAILURE, ex.getAppDataStatus());
        assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, ex.getHttpStatus());
        assertEquals(
            TeleApsConstants.COMMON_SERVICE_NOT_OK_MSG,
            ex.getMessage()
        );
    }

    @Test
    void whenResponseOk_thenReturnBodyAsList() {
        // arrange
        CommonContent c1 = new CommonContent();
        CommonContent c2 = new CommonContent();
        ResponseEntity<CommonContent[]> okResponse =
            new ResponseEntity<>(new CommonContent[]{c1, c2}, HttpStatus.OK);

        when(commonApsRestTemplate.exchange(
                anyString(),
                eq(HttpMethod.POST),
                any(HttpEntity.class),
                eq(CommonContent[].class)))
            .thenReturn(okResponse);

        // act
        List<CommonContent> result =
            service.getClaimData("999-99-9999", "REQ-002");

        // assert
        assertEquals(2, result.size());
        assertSame(c1, result.get(0));
        assertSame(c2, result.get(1));
    }

    @Test
    void whenResponseNotOk_thenReturnEmptyList() {
        // arrange
        ResponseEntity<CommonContent[]> badResponse =
            new ResponseEntity<>(new CommonContent[]{ new CommonContent() },
                                 HttpStatus.BAD_REQUEST);

        when(commonApsRestTemplate.exchange(
                anyString(),
                eq(HttpMethod.POST),
                any(HttpEntity.class),
                eq(CommonContent[].class)))
            .thenReturn(badResponse);

        // act
        List<CommonContent> result =
            service.getClaimData("555-55-5555", "REQ-003");

        // assert
        assertTrue(result.isEmpty());
    }
}
