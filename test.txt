--------------
ngnix.conf
--------------
server {
    listen 8080;
    server_name localhost;
    root /usr/share/nginx/html;
    index index.html;

    # Handle client-side routing (SPA) only at root
    location = / {
        try_files $uri $uri/ /index.html;
    }

    # Handle all other paths (including rewritten ones from /status-tracker/)
    location / {
        try_files $uri $uri/ /index.html;
    }

    # Serve the app under /status-tracker/ context
    location = /status-tracker {
        return 301 /status-tracker/;
    }

    location ~ ^/status-tracker/(.*)$ {
        # Strip base path so static assets resolve from doc root
        try_files /$1 /$1/ /index.html;
    }

    # Handle legacy /security-tracker/ path for backward compatibility
    location = /security-tracker {
        return 301 /status-tracker/;
    }

    location /security-tracker/ {
        # Redirect legacy path to new path
        return 301 /status-tracker/;
    }

    # Cache static assets
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
    }

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/xml+rss;
}
--------------
webpack.config.conf
--------------
const path = require('path');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');
const CopyWebpackPlugin = require('copy-webpack-plugin');
const { ModuleFederationPlugin } = require('webpack').container;

module.exports = (env, argv) => {
  const isProduction = argv.mode === 'production';
  // Serve the app under a sub-path context for dev server
  const basePath = '/status-tracker/';

  return {
    entry: './src/index.tsx',
    output: {
      path: path.resolve(__dirname, 'dist'),
      filename: isProduction ? '[name].[contenthash].js' : '[name].js',
      clean: true,
      // Ensure assets are referenced from the sub-path
      publicPath: 'auto'
    },
    resolve: {
      extensions: ['.tsx', '.ts', '.js', '.jsx'],
      alias: {
        '@': path.resolve(__dirname, 'src'),
      },
    },
    module: {
      rules: [
        {
          test: /\.tsx?$/,
          use: 'ts-loader',
          exclude: /node_modules/,
        },
        {
          test: /\.css$/,
          use: [
            isProduction ? MiniCssExtractPlugin.loader : 'style-loader',
            'css-loader',
            {
              loader: 'postcss-loader',
              options: {
                postcssOptions: {
                  plugins: [require('tailwindcss'), require('autoprefixer')],
                },
              },
            },
          ],
        },
        {
          test: /\.(png|jpe?g|gif|svg)$/i,
          type: 'asset/resource',
        },
      ],
    },
    plugins: [
      new ModuleFederationPlugin({
        name: 'status_tracker_ui',
        filename: 'remoteEntry.js',
        exposes: {
          './App': './src/App.tsx',
        },
        shared: {
          react: { singleton: true, requiredVersion: false },
          'react-dom': { singleton: true, requiredVersion: false },
          "react-router-dom": { singleton: true, requiredVersion: false },
        },
      }),
      new HtmlWebpackPlugin({
        template: './public/index.html',
        title: 'Security Clearance Tracker',
      }),
      new CopyWebpackPlugin({
        patterns: [
          {
            from: 'public',
            to: '.',
            globOptions: {
              ignore: ['**/index.html'], // Don't copy index.html since HtmlWebpackPlugin handles it
            },
          },
        ],
      }),
      ...(isProduction
        ? [
            new MiniCssExtractPlugin({
              filename: '[name].[contenthash].css',
            }),
          ]
        : []),
    ],
    devServer: {
      static: {
        directory: path.join(__dirname, 'public'),
        publicPath: basePath,
      },
      devMiddleware: {
        publicPath: basePath,
      },
      compress: true,
      port: 3000,
      hot: true,
      headers: {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, PATCH, OPTIONS',
        'Access-Control-Allow-Headers':
          'X-Requested-With, content-type, Authorization',
      },
      // Serve SPA for root and for any /security-tracker/* path
      historyApiFallback: {
        disableDotRule: true,
        rewrites: [
          { from: /^\/$/, to: basePath },
          { from: /^\/status-tracker(\/.*)?$/, to: basePath },
        ],
      },
    },
  };
};
----
index.html
---

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Security Clearance Tracker</title>
    <meta name="description" content="Security Clearance Tracker Application">
</head>
<body>
    <div id="root"></div>
</body>
</html>
---
app.tsx
-----
import React, { useEffect } from "react";
import { HeaderBar } from "./components/HeaderBar";
import MyCases from "./components/MyCases";
import CaseDetails from "./components/CaseDetails";
import { Routes, Route, Navigate, useNavigate } from "react-router-dom";
import "./styles/globals.css";

// Webpack will inject this value during build
declare let __webpack_public_path__: string;

const BRAND_BLUE = "#267AAD";

const App: React.FC = () => {
  const navigate = useNavigate();

  const handleBack = () => {
    if (window.history.length > 1) navigate(-1);
  };

  useEffect(() => {
    const basePath = __webpack_public_path__;
    console.log("Base path:", basePath);
  }, []);

  return (
    <div className="min-h-screen bg-gray-100">
      <HeaderBar />

      <section style={{ background: "#eef2f7" }} className="w-full">
        <div className="max-w-6xl mx-auto px-6 py-6">
          <button
            onClick={handleBack}
            className="inline-flex items-center gap-3"
            aria-label="Go back"
            style={{
              color: BRAND_BLUE,
              fontWeight: 700,
              background: "transparent",
              border: "none",
              cursor: "pointer",
              padding: 0,
            }}
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="22"
              height="22"
              viewBox="0 0 24 24"
              fill="none"
              stroke={BRAND_BLUE}
              strokeWidth="2"
              strokeLinecap="round"
              strokeLinejoin="round"
            >
              <polyline points="15 18 9 12 15 6" />
            </svg>
            <span style={{ textDecoration: "underline" }}>Back</span>
          </button>
        </div>
      </section>

      <main className="p-6 max-w-6xl mx-auto">
        <Routes>
          <Route path="/" element={<MyCases />} />
          <Route path="case/:caseId" element={<CaseDetails />} />
          <Route path="*" element={<Navigate to="/" replace />} />
        </Routes>
      </main>
    </div>
  );
};

export default App;


----
dockerfile
-----
# Use Node.js 18 Alpine for building
FROM node:18-alpine AS build

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies
RUN npm ci

# Copy source code
COPY . .

# Build the application
RUN npm run build

# Use nginx to serve the built application
FROM nginx:alpine

# Copy built files to nginx
COPY --from=build /app/dist /usr/share/nginx/html

# Copy nginx configuration
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Expose port
EXPOSE 8080

# Start nginx
CMD ["nginx", "-g", "daemon off;"]


