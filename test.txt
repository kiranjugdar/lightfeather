/**
 * Provides custom ordering:
 * - Primary sort by templateId alphabetically, with "DEFAULT" at the end
 * - Secondary sort by titleCode: "T2" → 1, "T16" → 2, "T18" → 3
 * 
 * @author 265392
 */
public class ClaimStatusDetailsComparator implements Comparator<ClaimStatusDetails> {
    
    @Override
    public int compare(ClaimStatusDetails d1, ClaimStatusDetails d2) {
        // --- Primary comparison by templateId ---
        int templateIdComparison = compareByTemplateId(d1, d2);
        if (templateIdComparison != 0) {
            return templateIdComparison;
        }
        
        // --- Secondary comparison by titleCode ---
        return compareByTitleCode(d1, d2);
    }
    
    private int compareByTemplateId(ClaimStatusDetails d1, ClaimStatusDetails d2) {
        String templateId1 = d1.getTemplateId();
        String templateId2 = d2.getTemplateId();
        
        // Handle null cases
        if (templateId1 == null && templateId2 == null) return 0;
        if (templateId1 == null) return 1;  // null goes to end
        if (templateId2 == null) return -1;
        
        // Handle DEFAULT case - always goes to end
        boolean isDefault1 = "DEFAULT".equals(templateId1);
        boolean isDefault2 = "DEFAULT".equals(templateId2);
        
        if (isDefault1 && isDefault2) return 0;
        if (isDefault1) return 1;   // DEFAULT goes to end
        if (isDefault2) return -1;  // DEFAULT goes to end
        
        // Normal alphabetical comparison for non-DEFAULT values
        return templateId1.compareTo(templateId2);
    }
    
    private int compareByTitleCode(ClaimStatusDetails d1, ClaimStatusDetails d2) {
        String code1 = d1.getTitleCode();
        String code2 = d2.getTitleCode();
        
        // Handle nulls for titleCode
        if (code1 == null && code2 == null) return 0;
        if (code1 == null) return 1;
        if (code2 == null) return -1;
        
        // Rank each titleCode
        int rank1 = rank(code1);
        int rank2 = rank(code2);
        
        // Compare by rank (smaller rank comes first)
        return Integer.compare(rank1, rank2);
    }
    
    /**
     * Provides custom ordering:
     * "T2" → 1
     * "T16" → 2  
     * "T18" → 3
     */
    private int rank(String titleCode) {
        if ("T2".equals(titleCode)) {
            return 1;
        } else if ("T16".equals(titleCode)) {
            return 2;
        } else if ("T18".equals(titleCode)) {
            return 3;
        } else {
            return Integer.MAX_VALUE;
        }
    }
}

-------

package gov.ssa.telephone.taps.comparator;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.DisplayName;
import static org.junit.jupiter.api.Assertions.*;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

/**
 * Unit tests for ClaimStatusDetailsComparator
 */
class ClaimStatusDetailsComparatorTest {
    
    private ClaimStatusDetailsComparator comparator;
    
    @BeforeEach
    void setUp() {
        comparator = new ClaimStatusDetailsComparator();
    }
    
    @Test
    @DisplayName("Should sort by templateId first, then titleCode")
    void testPrimarySort() {
        ClaimStatusDetails d1 = createClaimStatusDetails("TEMPLATE_B", "T2");
        ClaimStatusDetails d2 = createClaimStatusDetails("TEMPLATE_A", "T18");
        
        int result = comparator.compare(d1, d2);
        
        assertTrue(result > 0, "TEMPLATE_B should come after TEMPLATE_A");
    }
    
    @Test
    @DisplayName("Should sort titleCode within same templateId")
    void testSecondarySort() {
        ClaimStatusDetails d1 = createClaimStatusDetails("TEMPLATE_A", "T16");
        ClaimStatusDetails d2 = createClaimStatusDetails("TEMPLATE_A", "T2");
        
        int result = comparator.compare(d1, d2);
        
        assertTrue(result > 0, "T16 should come after T2 within same templateId");
    }
    
    @Test
    @DisplayName("Should place DEFAULT templateId at the end")
    void testDefaultAtEnd() {
        ClaimStatusDetails d1 = createClaimStatusDetails("DEFAULT", "T2");
        ClaimStatusDetails d2 = createClaimStatusDetails("TEMPLATE_Z", "T18");
        
        int result = comparator.compare(d1, d2);
        
        assertTrue(result > 0, "DEFAULT should come after any other templateId");
    }
    
    @Test
    @DisplayName("Should handle null templateId")
    void testNullTemplateId() {
        ClaimStatusDetails d1 = createClaimStatusDetails(null, "T2");
        ClaimStatusDetails d2 = createClaimStatusDetails("TEMPLATE_A", "T16");
        
        int result = comparator.compare(d1, d2);
        
        assertTrue(result > 0, "null templateId should come after non-null");
    }
    
    @Test
    @DisplayName("Should handle null titleCode")
    void testNullTitleCode() {
        ClaimStatusDetails d1 = createClaimStatusDetails("TEMPLATE_A", null);
        ClaimStatusDetails d2 = createClaimStatusDetails("TEMPLATE_A", "T2");
        
        int result = comparator.compare(d1, d2);
        
        assertTrue(result > 0, "null titleCode should come after non-null");
    }
    
    @Test
    @DisplayName("Should handle both null values")
    void testBothNull() {
        ClaimStatusDetails d1 = createClaimStatusDetails(null, null);
        ClaimStatusDetails d2 = createClaimStatusDetails(null, null);
        
        int result = comparator.compare(d1, d2);
        
        assertEquals(0, result, "Both null should be equal");
    }
    
    @Test
    @DisplayName("Should sort titleCodes in correct order: T2, T16, T18, others")
    void testTitleCodeOrder() {
        ClaimStatusDetails t2 = createClaimStatusDetails("TEMPLATE_A", "T2");
        ClaimStatusDetails t16 = createClaimStatusDetails("TEMPLATE_A", "T16");
        ClaimStatusDetails t18 = createClaimStatusDetails("TEMPLATE_A", "T18");
        ClaimStatusDetails other = createClaimStatusDetails("TEMPLATE_A", "T99");
        
        assertTrue(comparator.compare(t2, t16) < 0, "T2 should come before T16");
        assertTrue(comparator.compare(t16, t18) < 0, "T16 should come before T18");
        assertTrue(comparator.compare(t18, other) < 0, "T18 should come before other codes");
    }
    
    @Test
    @DisplayName("Should sort full list correctly")
    void testFullListSorting() {
        List<ClaimStatusDetails> list = Arrays.asList(
            createClaimStatusDetails("DEFAULT", "T2"),
            createClaimStatusDetails("TEMPLATE_C", "T18"),
            createClaimStatusDetails("TEMPLATE_A", "T16"),
            createClaimStatusDetails("TEMPLATE_B", "T2"),
            createClaimStatusDetails("TEMPLATE_A", "T2"),
            createClaimStatusDetails("DEFAULT", "T16"),
            createClaimStatusDetails("TEMPLATE_C", "T2"),
            createClaimStatusDetails(null, "T2")
        );
        
        Collections.sort(list, comparator);
        
        // Expected order:
        // TEMPLATE_A: T2, T16
        // TEMPLATE_B: T2
        // TEMPLATE_C: T2, T18
        // DEFAULT: T2, T16
        // null: T2
        
        assertEquals("TEMPLATE_A", list.get(0).getTemplateId());
        assertEquals("T2", list.get(0).getTitleCode());
        
        assertEquals("TEMPLATE_A", list.get(1).getTemplateId());
        assertEquals("T16", list.get(1).getTitleCode());
        
        assertEquals("TEMPLATE_B", list.get(2).getTemplateId());
        assertEquals("T2", list.get(2).getTitleCode());
        
        assertEquals("TEMPLATE_C", list.get(3).getTemplateId());
        assertEquals("T2", list.get(3).getTitleCode());
        
        assertEquals("TEMPLATE_C", list.get(4).getTemplateId());
        assertEquals("T18", list.get(4).getTitleCode());
        
        assertEquals("DEFAULT", list.get(5).getTemplateId());
        assertEquals("T2", list.get(5).getTitleCode());
        
        assertEquals("DEFAULT", list.get(6).getTemplateId());
        assertEquals("T16", list.get(6).getTitleCode());
        
        assertNull(list.get(7).getTemplateId());
        assertEquals("T2", list.get(7).getTitleCode());
    }
    
    @Test
    @DisplayName("Should be consistent (same result for same comparison)")
    void testConsistency() {
        ClaimStatusDetails d1 = createClaimStatusDetails("TEMPLATE_A", "T2");
        ClaimStatusDetails d2 = createClaimStatusDetails("TEMPLATE_B", "T16");
        
        int result1 = comparator.compare(d1, d2);
        int result2 = comparator.compare(d1, d2);
        
        assertEquals(result1, result2, "Comparator should be consistent");
    }
    
    @Test
    @DisplayName("Should be antisymmetric (compare(a,b) = -compare(b,a))")
    void testAntisymmetric() {
        ClaimStatusDetails d1 = createClaimStatusDetails("TEMPLATE_A", "T2");
        ClaimStatusDetails d2 = createClaimStatusDetails("TEMPLATE_B", "T16");
        
        int result1 = comparator.compare(d1, d2);
        int result2 = comparator.compare(d2, d1);
        
        assertEquals(result1, -result2, "Comparator should be antisymmetric");
    }
    
    // Helper method to create test objects
    private ClaimStatusDetails createClaimStatusDetails(String templateId, String titleCode) {
        return ClaimStatusDetails.builder()
            .templateId(templateId)
            .titleCode(titleCode)
            .build();
    }
}

