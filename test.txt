import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;
import org.springframework.web.util.ContentCachingRequestWrapper;
import org.springframework.web.util.ContentCachingResponseWrapper;

import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.nio.charset.StandardCharsets;

@Component
public class HttpLoggingFilter extends OncePerRequestFilter {

    @Override
    protected void doFilterInternal(HttpServletRequest request,
                                    HttpServletResponse response,
                                    FilterChain filterChain)
                                    throws ServletException, IOException {
        // Wrap request & response to cache the payloads
        ContentCachingRequestWrapper wrappedRequest  = new ContentCachingRequestWrapper(request);
        ContentCachingResponseWrapper wrappedResponse = new ContentCachingResponseWrapper(response);

        try {
            filterChain.doFilter(wrappedRequest, wrappedResponse);
        } finally {
            // After controller has run, you can read the payloads
            logRequest(wrappedRequest);
            logResponse(wrappedResponse);
            // VERY IMPORTANT: copy the buffered response back to the real response
            wrappedResponse.copyBodyToResponse();
        }
    }

    private void logRequest(ContentCachingRequestWrapper req) {
        String uri      = req.getRequestURI();
        String method   = req.getMethod();
        String query    = req.getQueryString();
        String payload  = getPayload(req.getContentAsByteArray(), req.getCharacterEncoding());
        logger.info(String.format("REQUEST %s %s?%s\nHeaders: %s\nBody: %s",
                    method, uri, query,
                    Collections.list(req.getHeaderNames())
                               .stream()
                               .map(h -> h + "=" + req.getHeader(h))
                               .collect(Collectors.joining(", ")),
                    payload));
    }

    private void logResponse(ContentCachingResponseWrapper res) {
        int    status  = res.getStatus();
        String payload = getPayload(res.getContentAsByteArray(), res.getCharacterEncoding());
        logger.info(String.format("RESPONSE Status=%d, Body=%s", status, payload));
    }

    private String getPayload(byte[] buf, String encoding) {
        if (buf == null || buf.length == 0) return "[empty]";
        try {
            return new String(buf, 0, buf.length, encoding != null ? encoding : StandardCharsets.UTF_8.name());
        } catch (Exception e) {
            return "[unknown]";
        }
    }
}
