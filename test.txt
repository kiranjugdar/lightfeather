package com.yourcompany.yourapp.services;  // ← adjust to your package

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

import java.util.Collections;
import java.util.List;
import java.util.Map;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockedStatic;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpStatus;

import com.yourcompany.yourapp.common.CommonApsService;
import com.yourcompany.yourapp.factories.ClaimFactory;
import com.yourcompany.yourapp.interpreter.ClaimLangInterpreter;
import com.yourcompany.yourapp.model.*;       // ClaimStatusRequest, ClaimStatusResponse, ClaimStatusData, CommonContent, ClaimStatusDetails, ClaimDetails, DdsData, DdsStatus, etc.
import com.yourcompany.yourapp.lookup.OfficeLookupService;
import com.yourcompany.yourapp.constants.AppDataStatus;
import com.yourcompany.yourapp.constants.TeleApsConstants;
import com.yourcompany.yourapp.exceptions.ApplicationException;

@ExtendWith(MockitoExtension.class)
class ClaimStatusServiceTest {

    @Mock
    private CommonApsService commonApsService;

    @Mock
    private OfficeLookupService officeLookupService;

    @InjectMocks
    private ClaimStatusService service;

    private ClaimStatusRequest request;

    @BeforeEach
    void setUp() {
        request = new ClaimStatusRequest();
        request.setClaimSsn("123‑45‑6789");
        request.setRequestId("REQ‑001");
        // suppose your request has a header object
        RequestHeader hdr = new RequestHeader();
        hdr.setSource("IVR");
        request.setHeader(hdr);
    }

    @Test
    void whenCommonApsThrows_shouldWrapInApplicationExceptionWithSystemFailure() {
        // arrange: simulate REST client failure
        when(commonApsService.getClaimData(anyString(), anyString()))
            .thenThrow(new RuntimeException("timeout"));

        // act & assert
        ApplicationException ex = assertThrows(ApplicationException.class,
            () -> service.getClaimStatus(request)
        );

        // verify that we got the SYSTEM_FAILURE status and OK http code
        assertEquals(AppDataStatus.SYSTEM_FAILURE, ex.getAppDataStatus());
        assertEquals(HttpStatus.OK, ex.getHttpStatus());

        // message should include your constant
        assertTrue(ex.getMessage().contains(TeleApsConstants.REST_CLIENT_EXCEPTION_MSG));
    }

    @Test
    void whenNoClaimsFound_shouldReturnZeroClaimsWithNoClaimsStatus() {
        // arrange: no claims returned
        when(commonApsService.getClaimData(anyString(), anyString()))
            .thenReturn(Collections.emptyList());

        // act
        ClaimStatusResponse resp = service.getClaimStatus(request);
        ClaimStatusData data = resp.getAppData();

        // assert
        assertEquals("0", data.getNumberOfClaims());
        assertEquals(AppDataStatus.NO_CLAIMS_FOUND_0400, data.getStatus());
        assertEquals(AppDataStatus.NO_CLAIMS_FOUND_0400.getCode(), data.getStatusCode());
        assertNotNull(data.getClaimStatusDetailsList());
        assertTrue(data.getClaimStatusDetailsList().isEmpty());

        // header should be passed through
        assertEquals("IVR", resp.getHeader().getSource());
    }

    @Test
    void whenClaimsReturned_shouldBuildAndSortResponseSuccessfully() {
        // arrange: simulate two raw CommonContent items
        CommonContent raw1 = new CommonContent();  // no foCode, no ddsData → shortcuts in getClaimStatusDetails
        CommonContent raw2 = new CommonContent();
        when(commonApsService.getClaimData(anyString(), anyString()))
            .thenReturn(List.of(raw2, raw1));

        // stub out your ClaimFactory → interpreter → claimDetails(...) chain
        ClaimLangInterpreter interpreter = mock(ClaimLangInterpreter.class);
        ClaimDetails detail = new ClaimDetails();
        detail.setTemplateId("TPL1");
        detail.setParameters(Map.of("foo", "bar"));
        detail.setVerbiage("Here is your status");
        detail.setTitleCode("T2");
        when(interpreter.claimDetails(any(CommonContent.class))).thenReturn(detail);

        try (MockedStatic<ClaimFactory> cf = mockStatic(ClaimFactory.class)) {
            cf.when(() -> ClaimFactory.getInstance(any(), any(), any()))
              .thenReturn(interpreter);

            // act
            ClaimStatusResponse resp = service.getClaimStatus(request);
            ClaimStatusData data = resp.getAppData();

            // assert basic metadata
            assertEquals("2", data.getNumberOfClaims());
            assertEquals(AppDataStatus.CLAIMSTATUS_SUCCESSFUL, data.getStatus());
            assertEquals(AppDataStatus.CLAIMSTATUS_SUCCESSFUL.getCode(), data.getStatusCode());

            // each raw item produced one ClaimStatusDetails
            List<ClaimStatusDetails> details = data.getClaimStatusDetailsList();
            assertEquals(2, details.size());

            // since both had titleCode "T2", order is unchanged but comparator still ran
            for (ClaimStatusDetails csd : details) {
                assertEquals("TPL1", csd.getTemplateId());
                assertEquals("Here is your status", csd.getVerbiage());
                assertEquals("T2", csd.getTitleCode());
                assertEquals("bar", csd.getFillables().get("foo"));
            }
        }
    }
}
