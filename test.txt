

/**
 * Provides custom ordering:
 * - Primary sort by titleCode alphabetically for non-DEFAULT templates
 * - DEFAULT template always goes to the bottom
 */
public class ClaimStatusDetailsComparator implements Comparator<ClaimStatusDetails> {
    
    private static final String DEFAULT_TEMPLATE = "DEFAULT";
    
    @Override
    public int compare(ClaimStatusDetails d1, ClaimStatusDetails d2) {
        String templateId1 = d1.getTemplateId();
        String templateId2 = d2.getTemplateId();
        
        // Handle null cases for templateId
        if (templateId1 == null && templateId2 == null) return compareByTitleCode(d1, d2);
        if (templateId1 == null) return -1; // null goes before DEFAULT
        if (templateId2 == null) return 1;
        
        // Check if either is DEFAULT template
        boolean isDefault1 = DEFAULT_TEMPLATE.equals(templateId1);
        boolean isDefault2 = DEFAULT_TEMPLATE.equals(templateId2);
        
        // If both are DEFAULT, compare by titleCode
        if (isDefault1 && isDefault2) return compareByTitleCode(d1, d2);
        
        // If only one is DEFAULT, DEFAULT goes to end
        if (isDefault1) return 1;  // d1 is DEFAULT, goes after d2
        if (isDefault2) return -1; // d2 is DEFAULT, goes after d1
        
        // Both are non-DEFAULT templates - sort by titleCode
        return compareByTitleCode(d1, d2);
    }
    
    private int compareByTitleCode(ClaimStatusDetails d1, ClaimStatusDetails d2) {
        String code1 = d1.getTitleCode();
        String code2 = d2.getTitleCode();
        
        // Handle nulls for titleCode
        if (code1 == null && code2 == null) return 0;
        if (code1 == null) return 1;  // null goes to end
        if (code2 == null) return -1;
        
        // Use the existing rank method for titleCode comparison
        int rank1 = rank(code1);
        int rank2 = rank(code2);
        
        // Compare by rank (smaller rank comes first)
        return Integer.compare(rank1, rank2);
    }
    
    /**
     * Provides custom ordering:
     * "T2" → 1
     * "T16" → 2  
     * "T18" → 3
     */
    private int rank(String titleCode) {
        if ("T2".equals(titleCode)) {
            return 1;
        } else if ("T16".equals(titleCode)) {
            return 2;
        } else if ("T18".equals(titleCode)) {
            return 3;
        } else {
            return Integer.MAX_VALUE; // Unknown codes go to end
        }
    }
}


------

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.DisplayName;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;

public class ClaimStatusDetailsComparatorTest {
    
    private ClaimStatusDetailsComparator comparator;
    private List<ClaimStatusDetails> testData;
    
    @BeforeEach
    void setUp() {
        comparator = new ClaimStatusDetailsComparator();
        testData = new ArrayList<>();
    }
    
    // Helper method to create ClaimStatusDetails objects
    private ClaimStatusDetails createClaim(String templateId, String titleCode) {
        ClaimStatusDetails claim = new ClaimStatusDetails();
        claim.setTemplateId(templateId);
        claim.setTitleCode(titleCode);
        return claim;
    }
    
    @Test
    @DisplayName("Should sort non-DEFAULT templates by titleCode rank")
    void testNonDefaultTemplatesSortedByTitleCode() {
        // Arrange
        testData.add(createClaim("TEMPLATE_A", "T18"));
        testData.add(createClaim("TEMPLATE_B", "T2"));
        testData.add(createClaim("TEMPLATE_C", "T16"));
        
        // Act
        Collections.sort(testData, comparator);
        
        // Assert
        assertEquals("T2", testData.get(0).getTitleCode());
        assertEquals("T16", testData.get(1).getTitleCode());
        assertEquals("T18", testData.get(2).getTitleCode());
    }
    
    @Test
    @DisplayName("Should place DEFAULT templates at the bottom")
    void testDefaultTemplatesGoToBottom() {
        // Arrange
        testData.add(createClaim("DEFAULT", "T2"));
        testData.add(createClaim("TEMPLATE_A", "T18"));
        testData.add(createClaim("DEFAULT", "T16"));
        testData.add(createClaim("TEMPLATE_B", "T2"));
        
        // Act
        Collections.sort(testData, comparator);
        
        // Assert - First two should be non-DEFAULT, sorted by titleCode
        assertEquals("TEMPLATE_B", testData.get(0).getTemplateId());
        assertEquals("T2", testData.get(0).getTitleCode());
        assertEquals("TEMPLATE_A", testData.get(1).getTemplateId());
        assertEquals("T18", testData.get(1).getTitleCode());
        
        // Last two should be DEFAULT templates, sorted by titleCode
        assertEquals("DEFAULT", testData.get(2).getTemplateId());
        assertEquals("T2", testData.get(2).getTitleCode());
        assertEquals("DEFAULT", testData.get(3).getTemplateId());
        assertEquals("T16", testData.get(3).getTitleCode());
    }
    
    @Test
    @DisplayName("Should handle null templateId correctly")
    void testNullTemplateId() {
        // Arrange
        testData.add(createClaim("DEFAULT", "T2"));
        testData.add(createClaim(null, "T16"));
        testData.add(createClaim("TEMPLATE_A", "T18"));
        
        // Act
        Collections.sort(testData, comparator);
        
        // Assert - null templateId should be treated as non-DEFAULT
        assertEquals(null, testData.get(0).getTemplateId());
        assertEquals("T16", testData.get(0).getTitleCode());
        assertEquals("TEMPLATE_A", testData.get(1).getTemplateId());
        assertEquals("T18", testData.get(1).getTitleCode());
        assertEquals("DEFAULT", testData.get(2).getTemplateId());
        assertEquals("T2", testData.get(2).getTitleCode());
    }
    
    @Test
    @DisplayName("Should handle null titleCode correctly")
    void testNullTitleCode() {
        // Arrange
        testData.add(createClaim("TEMPLATE_A", null));
        testData.add(createClaim("TEMPLATE_B", "T2"));
        testData.add(createClaim("TEMPLATE_C", "T16"));
        
        // Act
        Collections.sort(testData, comparator);
        
        // Assert - null titleCode should go to end within non-DEFAULT group
        assertEquals("T2", testData.get(0).getTitleCode());
        assertEquals("T16", testData.get(1).getTitleCode());
        assertEquals(null, testData.get(2).getTitleCode());
    }
    
    @Test
    @DisplayName("Should handle unknown titleCode values")
    void testUnknownTitleCodes() {
        // Arrange
        testData.add(createClaim("TEMPLATE_A", "T99"));
        testData.add(createClaim("TEMPLATE_B", "T2"));
        testData.add(createClaim("TEMPLATE_C", "T16"));
        testData.add(createClaim("TEMPLATE_D", "UNKNOWN"));
        
        // Act
        Collections.sort(testData, comparator);
        
        // Assert - Known codes first, unknown codes at end
        assertEquals("T2", testData.get(0).getTitleCode());
        assertEquals("T16", testData.get(1).getTitleCode());
        // Unknown codes should be at the end (order between them may vary)
        assertTrue(testData.get(2).getTitleCode().equals("T99") || testData.get(2).getTitleCode().equals("UNKNOWN"));
        assertTrue(testData.get(3).getTitleCode().equals("T99") || testData.get(3).getTitleCode().equals("UNKNOWN"));
    }
    
    @Test
    @DisplayName("Should handle both null templateId and titleCode")
    void testBothNullValues() {
        // Arrange
        testData.add(createClaim(null, null));
        testData.add(createClaim("DEFAULT", "T2"));
        testData.add(createClaim("TEMPLATE_A", "T16"));
        
        // Act
        Collections.sort(testData, comparator);
        
        // Assert
        assertEquals("TEMPLATE_A", testData.get(0).getTemplateId());
        assertEquals("T16", testData.get(0).getTitleCode());
        assertEquals(null, testData.get(1).getTemplateId());
        assertEquals(null, testData.get(1).getTitleCode());
        assertEquals("DEFAULT", testData.get(2).getTemplateId());
        assertEquals("T2", testData.get(2).getTitleCode());
    }
    
    @Test
    @DisplayName("Should maintain stable sort for equal elements")
    void testStableSortForEqualElements() {
        // Arrange - Create multiple claims with same templateId and titleCode
        ClaimStatusDetails claim1 = createClaim("TEMPLATE_A", "T2");
        ClaimStatusDetails claim2 = createClaim("TEMPLATE_B", "T2");
        ClaimStatusDetails claim3 = createClaim("TEMPLATE_C", "T2");
        
        testData.add(claim1);
        testData.add(claim2);
        testData.add(claim3);
        
        // Act
        Collections.sort(testData, comparator);
        
        // Assert - All should have same titleCode and be in some order
        for (ClaimStatusDetails claim : testData) {
            assertEquals("T2", claim.getTitleCode());
        }
    }
    
    @Test
    @DisplayName("Should handle empty list")
    void testEmptyList() {
        // Act & Assert - Should not throw exception
        assertDoesNotThrow(() -> Collections.sort(testData, comparator));
        assertTrue(testData.isEmpty());
    }
    
    @Test
    @DisplayName("Should handle single element list")
    void testSingleElementList() {
        // Arrange
        testData.add(createClaim("DEFAULT", "T2"));
        
        // Act & Assert - Should not throw exception
        assertDoesNotThrow(() -> Collections.sort(testData, comparator));
        assertEquals(1, testData.size());
        assertEquals("DEFAULT", testData.get(0).getTemplateId());
        assertEquals("T2", testData.get(0).getTitleCode());
    }
    
    @Test
    @DisplayName("Should handle complex mixed scenario")
    void testComplexMixedScenario() {
        // Arrange - Mix of all scenarios
        testData.add(createClaim("DEFAULT", "T18"));      // DEFAULT template
        testData.add(createClaim("TEMPLATE_A", "T2"));     // Regular template with T2
        testData.add(createClaim(null, "T16"));            // Null template with T16
        testData.add(createClaim("DEFAULT", null));        // DEFAULT template with null titleCode
        testData.add(createClaim("TEMPLATE_B", "UNKNOWN")); // Regular template with unknown titleCode
        testData.add(createClaim("TEMPLATE_C", "T16"));     // Regular template with T16
        testData.add(createClaim(null, null));             // Both null
        
        // Act
        Collections.sort(testData, comparator);
        
        // Assert - Verify overall structure
        // Non-DEFAULT templates should be first, sorted by titleCode
        // DEFAULT templates should be last
        
        int defaultStartIndex = -1;
        for (int i = 0; i < testData.size(); i++) {
            if ("DEFAULT".equals(testData.get(i).getTemplateId())) {
                defaultStartIndex = i;
                break;
            }
        }
        
        // Ensure DEFAULT templates are at the end
        assertTrue(defaultStartIndex > 0, "DEFAULT templates should not be at the beginning");
        
        // Verify all remaining items are DEFAULT
        for (int i = defaultStartIndex; i < testData.size(); i++) {
            assertTrue("DEFAULT".equals(testData.get(i).getTemplateId()) || 
                      testData.get(i).getTemplateId() == null, 
                      "All items after first DEFAULT should be DEFAULT or null");
        }
    }
}
