image: artifactory.devops.nbis.mil/devopsdockerlocal/maven:latest_3.9.2-eclipse-temurin_17

stages:
  - mvn_build
  - sonarQube
  - docker_build_publish
  - deploy
  - publish_prod
  - deploy_prod

variables:
  MAVEN_OPTS: "-Dmaven.wagon.http.ssl.insecure=true -Dmaven.wagon.http.ssl.allowall=true -Dmaven.resolver.transport=wagon"
  MAVEN_CLI_OPTS: "-s $CI_PROJECT_DIR/.m2/settings.xml --batch-mode --errors --fail-at-end --show-version"
  CACHE_KEY: $CI_COMMIT_REF_SLUG
  JAR_VERSION: 1.0.0
  AWS_IMAGE: artifactory.devops.nbis.mil/devopsdockerlocal/awscli:latest
  ARTIFACTORY_IMAGE: artifactory.devops.nbis.mil/devopsdockerlocal/dind:latest
  DEV_BRANCH: development
  MAIN_BRANCH: master
  DOCKER_TARGET_ARTIFACTORY_REPO: 'artifactory.devops.nbis.mil/idam-to-icam'
  DOCKER_TARGET_REPO_DEV: '664001695452.dkr.ecr.us-gov-west-1.amazonaws.com'
  DOCKER_TARGET_REPO_APPTEST: '662820985723.dkr.ecr.us-gov-west-1.amazonaws.com'
  DOCKER_TARGET_REPO_PROD: '823949920955.dkr.ecr.us-gov-west-1.amazonaws.com'

cache:
  key: $CACHE_KEY
  paths:
    - .m2/repository
    - .sbt

mvn_build:
  stage: mvn_build
  script:
    - echo "Build $MODULE"
    - mvn --version
    - javac --version
    - mvn $MAVEN_OPTS $MAVEN_CLI_OPTS clean install
    - echo "$(mvn --non-recursive help:evaluate -Dexpression=project.version -q -DforceStdout)_$(git rev-parse --short HEAD)" > jar_version
  artifacts:
    expire_in: 10 min
    paths:
      - $CI_PROJECT_DIR/agency-portal-api/target/*.jar
      - $CI_PROJECT_DIR/agency-portal-ui/target/*.jar
      - $CI_PROJECT_DIR/jar_version
  allow_failure: true

SonarQube:
  stage: sonarQube
  image: artifactory.devops.nbis.mil/devopsdockerlocal/sonarsource/sonar-scanner-cli:11.1
  dependencies:
    - mvn_build
  script:
    - sonar-scanner -Dsonar.host.url=http://140.18.178.197:8080 -Dsonar.token=$SONAR_CNE_TOKEN -Dsonar.projectVersion=$PROJECT_NAME-${CI_PIPELINE_ID} 
      -Dsonar.branch.name=${CI_COMMIT_REF_NAME} -Dsonar.projectKey=icam_icam-agency-portal_708f12d5-8314-4143-800a-ac1739b56faa 
      -Dsonar.java.binaries=**/* 
      -Dsonar.exclusions=**/*.yaml,**/*.sql,**/*.xml,**/*Test*.java,**/application-local.properties,agency-portal-ui/src/main/resources/static/**
  tags:
    - docker
  allow_failure: true    

.dockerTagPushScripts: &dockerTagPushScripts
  - echo "docker push $APP started"
  - echo $DOCKER_TARGET_REPO
  - docker tag icam-$APP:$IMAGE_TAG $DOCKER_TARGET_REPO/im/icam-$TARGET_IMG:$IMAGE_TAG 
  - docker tag icam-$APP:latest $DOCKER_TARGET_REPO/im/icam-$TARGET_IMG:latest
  - docker push $DOCKER_TARGET_REPO/im/icam-$TARGET_IMG:$IMAGE_TAG
  - docker push $DOCKER_TARGET_REPO/im/icam-$TARGET_IMG:latest

.commonDockerBuildPublishECRScripts: &commonDockerBuildPublishECRScripts
  - IMAGE_TAG="$(echo $CI_COMMIT_SHA | head -c 8)"
  - echo "docker build $APP started"
  - docker build -t icam-$APP:$IMAGE_TAG -t icam-$APP:latest -f Dockerfile-$APP . 
  - echo ${AWS_PROFILE}
  - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $DOCKER_TARGET_ECR_REPO
  - export DOCKER_TARGET_REPO=$DOCKER_TARGET_ECR_REPO
  - *dockerTagPushScripts

.commonDockerBuildPublishAllScripts: &commonDockerBuildPublishAllScripts
  - IMAGE_TAG="$(echo $CI_COMMIT_SHA | head -c 8)"
  - echo "docker build $APP started"
  - docker build -t icam-$APP:$IMAGE_TAG -t icam-$APP:latest -f Dockerfile-$APP . 
  - echo ${AWS_PROFILE}
  - docker login -u $MAVEN_REPO_USER -p $MAVEN_REPO_PASS $DOCKER_TARGET_ARTIFACTORY_REPO 
  - echo "docker push $APP started for Artificatory"
  - export DOCKER_TARGET_REPO=$DOCKER_TARGET_ARTIFACTORY_REPO
  - *dockerTagPushScripts
  - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $DOCKER_TARGET_ECR_REPO
  - echo "docker push $APP started for ECR"
  - export DOCKER_TARGET_REPO=$DOCKER_TARGET_ECR_REPO
  - *dockerTagPushScripts

.commonDockerPublish: &commonDockerPublish
  - IMAGE_TAG="$(echo $CI_COMMIT_SHA | head -c 8)"  
  - echo ${AWS_PROFILE}
  - docker login -u $MAVEN_REPO_USER -p $MAVEN_REPO_PASS $DOCKER_TARGET_ARTIFACTORY_REPO 
  - echo "docker pull $APP started for Artificatory" 
  - docker pull $DOCKER_TARGET_ARTIFACTORY_REPO/im/icam-$TARGET_IMG:$IMAGE_TAG
  - docker tag $DOCKER_TARGET_ARTIFACTORY_REPO/im/icam-$TARGET_IMG:$IMAGE_TAG icam-$APP:$IMAGE_TAG
  - docker tag icam-$APP:$IMAGE_TAG icam-$APP:latest
  - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $DOCKER_TARGET_ECR_REPO
  - echo "docker push $APP started for ECR"
  - export DOCKER_TARGET_REPO=$DOCKER_TARGET_ECR_REPO
  - *dockerTagPushScripts

### ------------------ BUILD AND PUBLISH (PARALLEL) ------------------

# Build and push API image in dev
docker_build_publish_api_dev:
  stage: docker_build_publish
  needs: [SonarQube]
  variables: 
    AWS_PROFILE: agdev
    APP: api
    TARGET_IMG: api
    DOCKER_TARGET_ECR_REPO: $DOCKER_TARGET_REPO_DEV
  image: artifactory.devops.nbis.mil/devopsdockerlocal/awscli:latest
  script: 
    *commonDockerBuildPublishECRScripts
  rules:
    - if: $CI_COMMIT_BRANCH == 'develop'
      when: always
    - if: $CI_COMMIT_BRANCH != 'develop' && $CI_COMMIT_TAG == null
      when: manual
  tags:
    - eapp3
  allow_failure: true

# Build and push UI image in dev
docker_build_publish_ui_dev:
  stage: docker_build_publish
  needs: [SonarQube]
  variables: 
    AWS_PROFILE: agdev
    APP: ui
    TARGET_IMG: ui
    DOCKER_TARGET_ECR_REPO: $DOCKER_TARGET_REPO_DEV
  image: artifactory.devops.nbis.mil/devopsdockerlocal/awscli:latest
  script: 
    *commonDockerBuildPublishECRScripts
  rules:
    - if: $CI_COMMIT_BRANCH == 'develop'
      when: always
    - if: $CI_COMMIT_BRANCH != 'develop' && $CI_COMMIT_TAG == null
      when: manual    
  tags:
    - eapp3
  allow_failure: true

# Build and push UI image to artifactory and test ECR
docker_build_publish_ui_test:
  stage: docker_build_publish
  needs: [SonarQube]
  image: artifactory.devops.nbis.mil/devopsdockerlocal/awscli:latest
  variables: 
    AWS_PROFILE: agapptest
    APP: ui
    TARGET_IMG: agencyportal-ui
    DOCKER_TARGET_ECR_REPO: $DOCKER_TARGET_REPO_APPTEST 
  script:
    *commonDockerBuildPublishAllScripts
  rules:
    - if: $CI_COMMIT_TAG !=null
      when: always
  tags:
    - eapp3
  allow_failure: true

# Build and push API image to artifactory and test ECR
docker_build_publish_api_test:
  stage: docker_build_publish
  needs: [SonarQube]
  image: artifactory.devops.nbis.mil/devopsdockerlocal/awscli:latest
  variables: 
    AWS_PROFILE: agapptest
    APP: api
    TARGET_IMG: agencyportal-api
    DOCKER_TARGET_ECR_REPO: $DOCKER_TARGET_REPO_APPTEST
  script:
    *commonDockerBuildPublishAllScripts
  rules:
    - if: $CI_COMMIT_TAG !=null
      when: always
  tags:
    - eapp3
  allow_failure: true

# Publish UI image from artifactory to prod
docker_publish_ui_prod:
  stage: 'publish_prod'
  needs: [docker_build_publish_ui_test]
  image: artifactory.devops.nbis.mil/devopsdockerlocal/awscli:latest
  variables: 
    AWS_PROFILE: agprod
    APP: ui
    TARGET_IMG: agencyportal-ui
    DOCKER_TARGET_ECR_REPO: $DOCKER_TARGET_REPO_PROD 
  script:
    *commonDockerPublish
  rules:
    - if: $CI_COMMIT_TAG !=null
      when: manual
  tags:
    - eapp3
  allow_failure: true

# Publish API image from artifactory to prod
docker_publish_api_prod:
  stage: 'publish_prod'
  needs: [docker_build_publish_api_test]
  image: artifactory.devops.nbis.mil/devopsdockerlocal/awscli:latest
  variables: 
    AWS_PROFILE: agprod
    APP: api
    TARGET_IMG: agencyportal-api
    DOCKER_TARGET_ECR_REPO: $DOCKER_TARGET_REPO_PROD
  script:
    *commonDockerPublish
  rules:
    - if: $CI_COMMIT_TAG != null
      when: manual
  tags:
    - eapp3
  allow_failure: true

### ------------------ DEPLOY (PARALLEL & INDEPENDENT) ------------------

deploy_dev_ui:
  stage: deploy
  needs: [docker_build_publish_ui_dev]
  image: artifactory.devops.nbis.mil/devopsdockerlocal/awscli:latest
  variables: 
    AWS_PROFILE: agdev
  script:
    - echo ${AWS_PROFILE}
    - echo "cloudformation template deploy"
    - IMAGE_TAG="$(echo $CI_COMMIT_SHA | head -c 8)"     
    - aws cloudformation deploy --stack-name agency-portal-dev-ui-stk --parameter-overrides ImageUrl=$DOCKER_TARGET_REPO_DEV/im/icam-ui:$IMAGE_TAG --template-file cfn_templates/dev_ui.json --region $AWS_REGION
  rules:
    - if: $CI_COMMIT_BRANCH == 'develop'
      when: always
    - if: $CI_COMMIT_BRANCH != null && $CI_COMMIT_TAG == null
      when: manual
  tags:
    - eapp3

deploy_dev_api:
  stage: deploy
  needs: [docker_build_publish_api_dev]
  image: artifactory.devops.nbis.mil/devopsdockerlocal/awscli:latest
  variables: 
    AWS_PROFILE: agdev
  script:
    - echo ${AWS_PROFILE}
    - echo "cloudformation template deploy"
    - IMAGE_TAG="$(echo $CI_COMMIT_SHA | head -c 8)"     
    - aws cloudformation deploy --stack-name agency-portal-dev-api-stk --parameter-overrides ImageUrl=$DOCKER_TARGET_REPO_DEV/im/icam-api:$IMAGE_TAG --template-file cfn_templates/dev_api.json --region $AWS_REGION    
  rules:
    - if: $CI_COMMIT_BRANCH == 'develop'
      when: always
    - if: $CI_COMMIT_BRANCH != null && $CI_COMMIT_TAG == null
      when: manual
  tags:
    - eapp3

# Deploy to test, prod, PMO, OT etc, follow same pattern:

deploy_pmo_ui:
  stage: deploy
  needs: [docker_build_publish_ui_test]
  image: artifactory.devops.nbis.mil/devopsdockerlocal/awscli:latest  
  variables:
    AWS_PROFILE: agapptest   
  script:
    - echo "cloudformation template deploy"
    - IMAGE_TAG="$(echo $CI_COMMIT_SHA | head -c 8)"     
    - aws cloudformation deploy --stack-name agency-portal-pmo-ui-stk --parameter-overrides ImageUrl=$DOCKER_TARGET_REPO_APPTEST/im/icam-agencyportal-ui:$IMAGE_TAG --template-file cfn_templates/pmo_ui.json --region $AWS_REGION    
  tags:
    - eapp3
  rules:
    - if: $CI_COMMIT_TAG !=null  
      when: always

deploy_pmo_api:
  stage: deploy
  needs: [docker_build_publish_api_test]
  image: artifactory.devops.nbis.mil/devopsdockerlocal/awscli:latest  
  variables:
    AWS_PROFILE: agapptest   
  script:
    - echo "cloudformation template deploy"
    - IMAGE_TAG="$(echo $CI_COMMIT_SHA | head -c 8)"     
    - aws cloudformation deploy --stack-name agency-portal-pmo-api-stk --parameter-overrides ImageUrl=$DOCKER_TARGET_REPO_APPTEST/im/icam-agencyportal-api:$IMAGE_TAG --template-file cfn_templates/pmo_api.json --region $AWS_REGION    
  rules:
    - if: $CI_COMMIT_TAG !=null  
      when: always
  tags:
    - eapp3 

deploy_prod_ui:
  stage: deploy_prod
  needs: [docker_publish_ui_prod]
  image: artifactory.devops.nbis.mil/devopsdockerlocal/awscli:latest  
  variables:
    AWS_PROFILE: agprod   
  script:
    - echo "cloudformation template deploy"
    - IMAGE_TAG="$(echo $CI_COMMIT_SHA | head -c 8)"     
    - aws cloudformation deploy --stack-name agency-portal-prod-ui-stk --parameter-overrides ImageUrl=$DOCKER_TARGET_REPO_PROD/im/icam-agencyportal-ui:$IMAGE_TAG --template-file cfn_templates/prod_ui.json --region $AWS_REGION    
  environment:
    name: agencyportal_prod  
    url: https://vetting.nbis.mil
  rules:
    - if: $CI_COMMIT_TAG !=null  
      when: manual
  tags:
    - eapp3
  allow_failure: true

deploy_prod_api:
  stage: deploy_prod
  needs: [docker_publish_api_prod]
  image: artifactory.devops.nbis.mil/devopsdockerlocal/awscli:latest  
  variables:
    AWS_PROFILE: agprod   
  script:
    - echo "cloudformation template deploy"
    - IMAGE_TAG="$(echo $CI_COMMIT_SHA | head -c 8)"     
    - aws cloudformation deploy --stack-name agency-portal-prod-api-stk --parameter-overrides ImageUrl=$DOCKER_TARGET_REPO_PROD/im/icam-agencyportal-api:$IMAGE_TAG --template-file cfn_templates/prod_api.json --region $AWS_REGION    
  environment:
      name: agencyportal_prod  
      url: https://vetting.nbis.mil
  rules:
    - if: $CI_COMMIT_TAG !=null  
      when: manual
  tags:
    - eapp3
  allow_failure: true

# Repeat for other deploy targets/environments as needed


