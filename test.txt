import org.springframework.session.FindByIndexNameSessionRepository;
import org.springframework.session.Session;

public class CustomPrincipalNameResolver implements FindByIndexNameSessionRepository.PrincipalNameResolver {

    @Override
    public String resolvePrincipalName(Session session) {
        Object serialNum = session.getAttribute("serial_num");
        if (serialNum != null) {
            return serialNum.toString();
        }
        // Fallback behavior (optional): you could extract from SPRING_SECURITY_CONTEXT or return null
        return null;
    }
}

--------
import javax.sql.DataSource;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.session.FindByIndexNameSessionRepository;
import org.springframework.session.jdbc.JdbcIndexedSessionRepository;
import org.springframework.session.jdbc.config.annotation.web.http.EnableJdbcHttpSession;
import org.springframework.session.json.JacksonJsonSerializer;

@Configuration
@EnableJdbcHttpSession
public class SessionConfig {

    @Bean
    public JdbcIndexedSessionRepository sessionRepository(DataSource dataSource) {
        JdbcIndexedSessionRepository repository = new JdbcIndexedSessionRepository(dataSource);
        
        // Configure the serializer as needed (here we use JacksonJsonSerializer)
        repository.setDefaultSerializer(new JacksonJsonSerializer());
        
        // Set the custom principal name resolver so that principal_name stores serial_num
        repository.setPrincipalNameResolver(new CustomPrincipalNameResolver());
        
        return repository;
    }
}
-----------
