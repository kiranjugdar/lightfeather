package com.example.demo.controller;

import com.example.demo.dto.OneTimePasscodeObjectForCollectingUserInput;
import com.example.demo.dto.OtpStatusDTO;
import com.example.demo.service.OTPService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentCaptor;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.ui.Model;

import javax.servlet.http.HttpSession;

import java.io.IOException;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class UpdateCertificateVerificationControllerTest {

    @Mock
    private OTPService otpService;

    @Mock
    private HttpSession session;

    @Mock
    private Model model;

    @InjectMocks
    private UpdateCertificateVerificationController controller;

    @BeforeEach
    void setup() {
        // Any common setup if needed
    }

    @Test
    void testGetUpdateCertificateVerificationPage() {
        // If your controller method signature is something like:
        // public String getUpdateCertificateVerificationPage(Model model, HttpServletRequest request)
        // then you can pass mocks for Model and a mock or null for HttpServletRequest.

        // For example (assuming you do not need request):
        String viewName = controller.getUpdateCertificateVerificationPage(model, null);

        assertEquals("UPDATECERTIFICATEVERIFICATION", viewName);
        // You can verify model interactions:
        verify(model).addAttribute(eq("personaId"), any());
    }

    @Test
    void testSubmitUpdateCertificateVerification_Success() {
        // Given
        OtpStatusDTO successStatus = new OtpStatusDTO(true, false, "OTP validated successfully");
        when(otpService.validateOTP(anyInt(), anyString())).thenReturn(successStatus);

        OneTimePasscodeObjectForCollectingUserInput input = new OneTimePasscodeObjectForCollectingUserInput();
        input.setPersonaId(123);
        input.setOtp("999999");

        // When
        // Suppose your controller method is:
        // public String submitUpdateCertificateVerification(HttpSession session, Model model,
        //     OneTimePasscodeObjectForCollectingUserInput input, String submit)
        String viewName = controller.submitUpdateCertificateVerification(session, model, input, "submit");

        // Then
        assertEquals("redirect:/updatecertificate", viewName);
        verify(otpService).validateOTP(123, "999999");
        // Check model attribute
        verify(model).addAttribute("STATUS_MESSAGE", "OTP validated successfully");
    }

    @Test
    void testSubmitUpdateCertificateVerification_Expired() {
        // Given
        OtpStatusDTO expiredStatus = new OtpStatusDTO(false, true, "OTP expired");
        when(otpService.validateOTP(anyInt(), anyString())).thenReturn(expiredStatus);

        OneTimePasscodeObjectForCollectingUserInput input = new OneTimePasscodeObjectForCollectingUserInput();
        input.setPersonaId(321);
        input.setOtp("111111");

        // When
        String viewName = controller.submitUpdateCertificateVerification(session, model, input, "submit");

        // Then
        assertEquals("redirect:/updatecertificate", viewName);
        verify(otpService).validateOTP(321, "111111");
        // Check model attribute
        verify(model).addAttribute("STATUS_MESSAGE", "OTP expired");
    }

    @Test
    void testSubmitUpdateCertificateVerification_Invalid() {
        // Given
        OtpStatusDTO invalidStatus = new OtpStatusDTO(false, false, "Invalid OTP");
        when(otpService.validateOTP(anyInt(), anyString())).thenReturn(invalidStatus);

        OneTimePasscodeObjectForCollectingUserInput input = new OneTimePasscodeObjectForCollectingUserInput();
        input.setPersonaId(111);
        input.setOtp("ABCDEF");

        // When
        String viewName = controller.submitUpdateCertificateVerification(session, model, input, "submit");

        // Then
        assertEquals("UPDATECERTIFICATEVERIFICATION", viewName);
        verify(otpService).validateOTP(111, "ABCDEF");
        // Check that the model has an "incorrectCode" attribute (adapt to your naming)
        verify(model).addAttribute("incorrectCode", "Incorrect code");
    }

    @Test
    void testSubmitUpdateCertificateVerification_PersonaIdNull() {
        // If personaId is null or not set, your controller might set an error attribute
        OneTimePasscodeObjectForCollectingUserInput input = new OneTimePasscodeObjectForCollectingUserInput();
        // Intentionally not setting personaId or OTP

        String viewName = controller.submitUpdateCertificateVerification(session, model, input, "submit");

        assertEquals("UPDATECERTIFICATEVERIFICATION", viewName);
        verify(model).addAttribute(eq("servererror"), anyString());
    }

    @Test
    void testResendUpdateCertificateVerification_Success() throws IOException {
        // If the user clicks "resend", you might have a method like:
        // public String resendUpdateCertificateVerification(HttpSession session, Model model,
        //     OneTimePasscodeObjectForCollectingUserInput input) throws IOException
        // which calls otpService.generateOTPAndExpiry(...).

        OneTimePasscodeObjectForCollectingUserInput input = new OneTimePasscodeObjectForCollectingUserInput();
        input.setPersonaId(555);

        String viewName = controller.resendUpdateCertificateVerification(session, model, input);

        assertEquals("UPDATECERTIFICATEVERIFICATION", viewName);
        verify(otpService).generateOTPAndExpiry(555);
        verify(model).addAttribute("STATUS_MESSAGE", "OTP resent successfully");
    }

    @Test
    void testResendUpdateCertificateVerification_NoPersonaId() throws IOException {
        OneTimePasscodeObjectForCollectingUserInput input = new OneTimePasscodeObjectForCollectingUserInput();
        // personaId not set => null

        String viewName = controller.resendUpdateCertificateVerification(session, model, input);

        assertEquals("UPDATECERTIFICATEVERIFICATION", viewName);
        verify(model).addAttribute(eq("servererror"), anyString());
        verifyNoInteractions(otpService); // Should not call generateOTPAndExpiry if personaId is null
    }
}
